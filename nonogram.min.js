const q = e => document.querySelector(e), ce = e => document.createElement(e)
let solution = [], cell_click = (e, v, c) => {
    e.preventDefault()
    if (parseInt(c.getAttribute`v`) + q`table`.classList.contains`won` == 0) {
        let i = c.getAttribute`i`, s = solution[Math.floor(i / parseInt(q`input`.value))][i % parseInt(q`input`.value)]
        c.className = v % 2 != s ? 'error' : ''
        c.setAttribute('v', s + 1)
    }
    q`table`.className = !document.querySelectorAll`td[v='0']`.length ? 'won' : ''
}
(q`btn`.onclick = () => {
    document.querySelectorAll`table *`.forEach(e => e.remove())
    solution = new Array(parseInt(q`input`.value)).fill(0).map(e => new Array(parseInt(q`input`.value)).fill(0).map(f => Math.round(Math.random())))
    let rh = [...solution].map(e => e.reduce((a, b) => b == 1 ? a[a.length - 1] == -1 ? [...a, 1] : [...a.slice(0, -2), a[a.length - 1] + 1] : [...a, -1], [-1]).filter(e => e != -1)),
        ch = new Array(parseInt(q`input`.value)).fill([-1]).map((a, x) => {
            for (let y = 0; y < parseInt(q`input`.value); y++) a = solution[y][x] == 1 ? a[a.length - 1] == -1 ? [...a, 1] : [...a.slice(0, -2), a[a.length - 1] + 1] : [...a, -1]
            return a.filter(e => e != -1)
        }), hh = ce`tr`
    hh.append(ce`th`)
    ch.forEach(c => hh.insertAdjacentHTML('beforeend', `<th scope='col'>${c.join`<br/>` || '—'}</th>`))
    q`table`.append(hh, ...new Array(parseInt(q`input`.value)).fill(0).map((e, y) => {
        e = ce`tr`
        e.insertAdjacentHTML('beforeend', `<th scope='row'>${rh[y].join`,` || '—'}</th>`)
        for (let x = 0; x < parseInt(q`input`.value); x++) e.insertAdjacentHTML('beforeend', `<td i='${(document.querySelectorAll`tr`.length) * parseInt(q`input`.value) + x}' v='0' onclick='cell_click(event, 1, this)' oncontextmenu='cell_click(event, 2, this)'></td>`)
        return e
    }))
})()